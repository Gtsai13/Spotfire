from Spotfire.Dxp.Data import AddRowsSettings
from System.IO import StringReader, StreamReader, StreamWriter, MemoryStream, SeekOrigin
from Spotfire.Dxp.Data.Import import TextFileDataSource, TextDataReaderSettings
from Spotfire.Dxp.Data import *


dataTable = Document.Data.Tables["Oxy Eag Daily Production"]
rowIndexSet=Document.ActiveMarkingSelectionReference.GetSelection(dataTable).AsIndexSet()
cursor = DataValueCursor.CreateFormatted(dataTable.Columns["Cum Oil at Days Flat"])
list = []

#Read Document Properties I need
DaysFlat = Document.Properties["DaysFlat"] #Real
OilIP = Document.Properties["OilIP"] #Real
OilB = Document.Properties["OilB"] #Real
#MonthsProduced comes in as a real

#Uncomment this if we're using R scripts to calc secondary TC parametsr
OilTexp = Document.Properties["OilTexpTest"]
OilQexp = Document.Properties["OilQexpTest"]
OilAexp = Document.Properties["OilAexpTest"]
OilNpexp = Document.Properties["OilNpexpTest"]
OilAi = Document.Properties["OilAiTest"]


###TC Parameters that are calculated as string custome expressions
#OilTexp = -((1/(OilB*math.log(1-(OilDmin/100)))+1/(OilAi*12*OilB)))*12
#OilQexp = OilIP/((1+OilAi*(math.ceil(OilTexp)-1)*OilB)^(1/OilB))
#OilAexp = -math.log(1-OilDmin/100)/12
#OilNpexp = OilIP*365/12/(OilAi*(1-OilB))*(1-1/((1+OilAi*round(OilTexp,0)*OilB)^((1-OilB)/OilB)))
#OilAi = (1/OilB*((1-OilDi/100)^(-OilB)-1))/12





"""c.Index or the .Index function in this case actually returns the row indexes for all marked rowIndexSet
for c in dataTable.GetRows(rowIndexSet, cursor):
	print c.Index
For example the output is below:
23207
23208
23209
23210
23211
23212
"""		



""" Trying to figure out what .CurrentValue does
for c in dataTable.GetRows(rowIndexSet, cursor):
	rowIndex = c.Index
	print cursor.CurrentValue
it actually returns a column of the current value for all of the row indexes for the markes rowIndexSet
Example output:
0.00
(Empty)
(Empty)
(Empty)
(Empty)
(Empty)
"""


for c in dataTable.GetRows(rowIndexSet, cursor):
	rowIndex = c.Index
	if (str(cursor.CurrentValue) != str("(Empty)")):
		list.append(cursor.CurrentValue)
		CumOilAtDaysFlat = max(list)
		CumOilAtDaysFlat = float(CumOilAtDaysFlat)/1000

Document.Properties["CumOilAtDaysFlat"] = CumOilAtDaysFlat


#Cum2Date
cursor = DataValueCursor.CreateFormatted(dataTable.Columns["Cum Oil"])
list = []

for c in dataTable.GetRows(rowIndexSet, cursor):
	rowIndex = c.Index
	if (str(cursor.CurrentValue) != str("(Empty)")):
		list.append(cursor.CurrentValue)
		Cum2Date = max(list)
		Cum2Date = float(Cum2Date)/1000

Document.Properties["Cum2Date"] = Cum2Date


#Months Produced
cursor = DataValueCursor.CreateFormatted(dataTable.Columns["Month"])
list = []

for c in dataTable.GetRows(rowIndexSet, cursor):
	rowIndex = c.Index
	if (str(cursor.CurrentValue) != str("(Empty)")):
		list.append(cursor.CurrentValue)
		MonthsProduced = max(list)

Document.Properties["MonthsProduced"] = MonthsProduced

###TC Curve Through Above




if MonthsProduced > 0 and MonthsProduced < (DaysFlat/30.4):
	TCCumThruAbove = MonthsProduced*(OilIP*30.4)

elif MonthsProduced > 0 and MonthsProduced < OilTexp:
	TCCumThruAbove	= (DaysFlat*OilIP)+(OilIP*30.4)/(OilAi*(1-OilB))*(1-1/((1+OilAi*(Max([Month])-DaysFlat/30.4)*OilB)^((1-OilB)/OilB)))

elif MonthsProduced > 0 and MonthsProduced > OilTexp:
	TCCumThruAbove = (OilQexp*30.4)/OilAexp*(1-exp(-OilAexp*((((MonthsProduced)-DaysFlat/30.4))-round(OilTexp,0))))+OilNpexp

else: 
	TCCumThruAbove = 0

TCCumThruAbove = TCCumThruAbove/1000

Document.Properties["TCCumThruAbove"] = TCCumThruAbove


###EUR Historical/ Forecast
CommercialEUR = (((OilQexp*365/12)/(OilAexp)*(1-exp(-OilAexp*(600-math.floor(OilTexp))))+OilNpexp+OilIP*DaysFlat)/1000) - TCThruCumAbove +Cum2Date


Document.Properties["CommercialEUR"] = CommercialEUR




